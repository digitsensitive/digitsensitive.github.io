<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hello on digitsensitive</title><link>https://digitsensitive.github.io/</link><description>Recent content in Hello on digitsensitive</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Sep 2024 14:30:00 +0200</lastBuildDate><atom:link href="https://digitsensitive.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>A Compact Scene Manager for TIC-80</title><link>https://digitsensitive.github.io/posts/tic80-compact-scene-manager/</link><pubDate>Tue, 03 Sep 2024 14:30:00 +0200</pubDate><guid>https://digitsensitive.github.io/posts/tic80-compact-scene-manager/</guid><description>In this post, I&amp;rsquo;ll show you how to write a compact scene manager for your TIC-80 games. Feel free to check out the code and let me know if you have any suggestions for further optimization!
You can play the TIC-80 cart online here: Play TIC-80 Cart
Code in Lua -- SCENE MANAGER &amp;gt; local scenes={} local curr=nil function reg(n,...) scenes[n]={...} end function switch(n) curr=scenes[n] curr[1]() end -- &amp;lt; SCENE MANAGER function iMenu() -- Menu Init end function uMenu() if btnp(4) then switch(&amp;#34;Game&amp;#34;) end end function dMenu() cls(0) print(&amp;#34;&amp;gt; Menu Scene .</description></item><item><title>Bubble Blitz</title><link>https://digitsensitive.github.io/projects/bubble-blitz/</link><pubDate>Sun, 28 Apr 2024 07:41:10 +0200</pubDate><guid>https://digitsensitive.github.io/projects/bubble-blitz/</guid><description>Dive into an enchanting underwater world where colorful bubbles float gently towards the surface. As a deep-sea explorer, your mission is to pop as many bubbles as you can.
Ressources Privacy Policy Terms and Conditions</description></item><item><title>Your start with CMake: As simple as it can get</title><link>https://digitsensitive.github.io/posts/cmake-starter/</link><pubDate>Tue, 31 Jan 2023 11:00:00 +0100</pubDate><guid>https://digitsensitive.github.io/posts/cmake-starter/</guid><description>When I recently started to work with CMake for a C++ project, I did find it challenging to get started with. The documentation is comprehensive but can be overwhelming. There are of course multiple helpful articles and tutorials around, but I was already struggling with the simplest commands.
This article is mainly for the people, who use CMake for the first time. I will try to use as less words and to be as clear as possible.</description></item><item><title>Print String in Commodore 64 Assembly Language</title><link>https://digitsensitive.github.io/posts/c64-print/</link><pubDate>Tue, 27 Dec 2022 11:00:00 +0100</pubDate><guid>https://digitsensitive.github.io/posts/c64-print/</guid><description>When the THEC64 from Retro Games was released at the end of December 2019, I was able to spend some time making up for lost time with the so-called &amp;ldquo;breadbox&amp;rdquo;.
With a lot of interest I read through the official Commodore 64 User&amp;rsquo;s Guide and learnd some BASIC, the onboard programming language. In the last two years I have been playing with the C64 on and off and have also been looking into the 6502 assembly programming language.</description></item><item><title>Geometry</title><link>https://digitsensitive.github.io/notes/geometry/</link><pubDate>Sat, 12 Nov 2022 07:41:10 +0200</pubDate><guid>https://digitsensitive.github.io/notes/geometry/</guid><description>Basic Vector Operations Magnitude The magnitude or length of a vector is calculated by multiplying each component by itself, summing all together, and then taking the square root. It is basically the Pythagorean theorem in n dimensions.
// Example for a Vec2D a(x,y); float x = 4.0f; float y = 2.0f; float length = sqrt(a.x * a.x + a.y * a.y); printf(&amp;#34;The length of vector a is: %f.\n&amp;#34;, length); // Output: The length of my_vector is: 4.</description></item><item><title>TIC-80</title><link>https://digitsensitive.github.io/notes/tic80/</link><pubDate>Tue, 18 Oct 2022 14:00:00 +0100</pubDate><guid>https://digitsensitive.github.io/notes/tic80/</guid><description>Basic setup function init() end init() function TIC() -- here lies our game loop end Game loop function TIC() global.time=global.time+1 input() if global.time%global.updateSpeed==0 then update() end draw() end General helper functions function cos(x) return math.cos(x) end function sin(x) return math.sin(x) end function tan(x) return math.tan(x) end function rnd(x,y) return math.random(x,y) end function rndArray(a) return a[math.random(#a)] end function ins(t,e) return table.insert(t,e) end function rmv(t,e) return table.remove(t,e) end -- get maximum of two numbers function max(n1,n2) return math.</description></item><item><title>The Point-In-Polygon Problem</title><link>https://digitsensitive.github.io/posts/point-in-polygon/</link><pubDate>Tue, 18 Oct 2022 11:00:00 +0100</pubDate><guid>https://digitsensitive.github.io/posts/point-in-polygon/</guid><description>In this article we want to explore the point-in-polygon (PIP) problem. The problem raises the question whether a given point in the plane lies inside, outside or on the boundary of a polygon. This is in particular a basic operation in computer graphics.
The article cannot be considered as a fully comprehensive coverage of every aspect of the problem. Errors cannot be excluded. Corrections or additions are always desired and welcome.</description></item><item><title>Lua</title><link>https://digitsensitive.github.io/notes/lua/</link><pubDate>Sun, 10 Jul 2022 07:41:10 +0200</pubDate><guid>https://digitsensitive.github.io/notes/lua/</guid><description>Comments -- simple one liner --[[ multiline comment ]] Variables In lua every variable is by default global, which is a historical decision. Nowadays this is considered bad practice (f.e. in moonscript everything is by default local).
In general you should always use local. Same goes for functions, which you can also declare as local.
local x = 4 y,z = 4,9 Operators Relational operators -- equal to == -- not equal to ~= -- greater than &amp;gt; -- less than &amp;lt; -- greater than or equal to &amp;gt;= -- less than or equal to &amp;lt;= Arithmetic operators -- Addition + -- Subtraction - -- Multiplication * -- Division / -- Modulus % -- Exponent -- Use the built-in `^` operator rather than the `math.</description></item><item><title>Learn to create a HTML5 Game in 5 Minutes</title><link>https://digitsensitive.github.io/posts/html5-game-in-five-minutes/</link><pubDate>Sat, 09 Feb 2019 00:12:00 +0100</pubDate><guid>https://digitsensitive.github.io/posts/html5-game-in-five-minutes/</guid><description>Building Games with HTML5 and JavaScript has gained a lot of popularity in recent years and many Game Engines / Frameworks (List) were created.
In this article, I will show you how to build a flappy bird clone with the free and powerful Game Framework Phaser 3 in TypeScript (will compile to plain JavaScript).
Step 1: Prerequisites To access the source code on github, download and install git from here. You also need node.</description></item></channel></rss>